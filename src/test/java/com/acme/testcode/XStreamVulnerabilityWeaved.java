package com.acme.testcode;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;

public final class XStreamVulnerabilityWeaved {

    public Converter converter;

    public Object secure(String xml) {
        XStream xstream = new XStream();
        xstream.registerConverter(converter);
        return xstream.fromXML(xml);
    }

    public Object insecure(String xml) {
        XStream xstream = new XStream();
        xstream.registerConverter(new Converter() {

            public boolean canConvert(final Class type) {
                return type != null && (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class || java.lang.reflect.Proxy.isProxyClass(type));
            }

            public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {
                throw new SecurityException("unsupported type due to security reasons");
            }

            public void marshal(final Object source, final HierarchicalStreamWriter writer, final MarshallingContext context) {
                throw new SecurityException("unsupported type due to security reasons");
            }
        }, XStream.PRIORITY_LOW);
        return xstream.fromXML(xml);
    }

    void unsure(XStream xstream, String xml) {
        xstream.fromXML(xml);
    }
}
