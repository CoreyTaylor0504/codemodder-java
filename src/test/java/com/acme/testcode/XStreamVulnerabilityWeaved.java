package com.acme.testcode;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.Converter;

public final class XStreamVulnerabilityWeaved {

  public Converter converter;

  public Object secure(String xml) {
    XStream xstream = new XStream();
    xstream.registerConverter(converter);
    return xstream.fromXML(xml);
  }

  public Object insecure(String xml) {
    XStream xstream = new XStream();
    xstream.registerConverter(new com.thoughtworks.xstream.converters.Converter() {

        public boolean canConvert(final Class type) {
            return type != null && (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class || java.lang.reflect.Proxy.isProxyClass(type));
        }

        public Object unmarshal(final com.thoughtworks.xstream.io.HierarchicalStreamReader reader, final com.thoughtworks.xstream.converters.UnmarshallingContext context) {
            throw new SecurityException("unsupported type due to security reasons");
        }

        public void marshal(final Object source, final com.thoughtworks.xstream.io.HierarchicalStreamWriter writer, final com.thoughtworks.xstream.converters.MarshallingContext context) {
            throw new SecurityException("unsupported type due to security reasons");
        }
    }, XStream.PRIORITY_LOW);
      return xstream.fromXML(xml);
  }

    void unsure(XStream xstream, String xml) {
        xstream.fromXML(xml);
    }
}
