package com.acme.testcode;

import io.openpixee.security.ObjectInputFilters;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputFilter;
import java.io.ObjectInputStream;

final class DeserializationVulnerabilityWeaved {

  /**
   * We can't tell if this {@link ObjectInputStream} already has a filter, since it's been passed to
   * this method from who knows where. We call back to our sensor to try to harden it.
   */
  public void cant_tell_if_filtered(ObjectInputStream ois)
      throws IOException, ClassNotFoundException {
    System.out.println("cant_tell_if_filtered");
    ObjectInputFilters.enableObjectFilterIfUnprotected(ois);
    ois.readObject();
  }

  /**
   * In this case, the call is clearly unfiltered, so we should be able to inject our filter. It
   * also assigns the deserialization result.
   */
  public void unfiltered(InputStream is) throws IOException, ClassNotFoundException {
    System.out.println("clearly_unfiltered");
    ObjectInputStream ois = new ObjectInputStream(is);
    ObjectInputFilters.enableObjectFilterIfUnprotected(ois);
    Object o = ois.readObject();
  }

  /**
   * In this case, the call is clearly filtered, but we could intercept that call and introduce a
   * hardening call. We don't to we avoid complexity.
   */
  public Object filtered(InputStream is) throws IOException, ClassNotFoundException {
    System.out.println("clearly_filtered");
    ObjectInputStream ois = new ObjectInputStream(is);
    ObjectInputFilter filter = ObjectInputFilter.Config.createFilter("!bad;good");
    ois.setObjectInputFilter(filter);
    return ois.readObject();
  }
}
